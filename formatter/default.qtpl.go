// Code generated by qtc from "default.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package formatter

import (
	"github.com/fatih/color"

	"github.com/conventionalcommit/commitlint/lint"
)

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

var (
	errorSign   = color.RedString("❌")
	warningSign = color.YellowString("!")
	successSign = color.GreenString("✔")
)

func streamformatResult(qw422016 *qt422016.Writer, res *lint.Result) {
	if res.IsOK() {
		streamsuccessResult(qw422016, res)
		return

	}
	qw422016.N().S(`
`)
	streamerrorResult(qw422016, res)
}

func writeformatResult(qq422016 qtio422016.Writer, res *lint.Result) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamformatResult(qw422016, res)
	qt422016.ReleaseWriter(qw422016)
}

func formatResult(res *lint.Result) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeformatResult(qb422016, res)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamerrorResult(qw422016 *qt422016.Writer, res *lint.Result) {
	qw422016.N().S(`commitlint

  → input: `)
	qw422016.N().Q(res.Input())
	qw422016.N().S(`

`)
	if res.HasErrors() {
		qw422016.N().S(`Errors:

`)
		for _, msg := range res.Errors() {
			qw422016.N().S(`  `)
			qw422016.E().S(errorSign)
			qw422016.N().S(` `)
			qw422016.N().S(msg.Name)
			qw422016.N().S(`: `)
			qw422016.N().S(msg.Message)
			qw422016.N().S(`
`)
		}
	}
	qw422016.N().S(`
`)
	if res.HasWarns() {
		qw422016.N().S(`Warnings:

`)
		for _, msg := range res.Warns() {
			qw422016.N().S(`  `)
			qw422016.E().S(warningSign)
			qw422016.N().S(` `)
			qw422016.N().S(msg.Message)
			qw422016.N().S(`
`)
		}
	}
	qw422016.N().S(`
Total `)
	qw422016.N().D(len(res.Errors()))
	qw422016.N().S(` errors, `)
	qw422016.N().D(len(res.Warns()))
	qw422016.N().S(` warnings
`)
}

func writeerrorResult(qq422016 qtio422016.Writer, res *lint.Result) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamerrorResult(qw422016, res)
	qt422016.ReleaseWriter(qw422016)
}

func errorResult(res *lint.Result) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeerrorResult(qb422016, res)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamsuccessResult(qw422016 *qt422016.Writer, res *lint.Result) {
	qw422016.N().S(` `)
	qw422016.E().S(successSign)
	qw422016.N().S(` commit message
`)
}

func writesuccessResult(qq422016 qtio422016.Writer, res *lint.Result) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamsuccessResult(qw422016, res)
	qt422016.ReleaseWriter(qw422016)
}

func successResult(res *lint.Result) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writesuccessResult(qb422016, res)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
